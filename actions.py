import paramiko
import time




def run_command(ssh_client: paramiko.SSHClient, command: str, timeout: int = 30):
    """Run a command via SSH and return (stdout, stderr) as strings."""
    if ssh_client is None:
        raise ValueError('–ù–µ—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    stdin, stdout, stderr = ssh_client.exec_command(command, timeout=timeout)
    out = stdout.read().decode('utf-8', errors='ignore')
    err = stderr.read().decode('utf-8', errors='ignore')
    return out, err

def check_docker(ssh_client: paramiko.SSHClient) -> str:
    """Check if Docker is installed by running 'docker --version'."""
    try:
        out, err = run_command(ssh_client, 'docker --version')
        if out:
            return f'Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {out.strip()}'
        # sometimes docker is available via sudo
        out, err = run_command(ssh_client, 'sudo docker --version')
        if out:
            return f'Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è sudo): {out.strip()}'
        # if neither returned output, consider docker not installed
        return 'Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.'
    except Exception as e:
        return f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Docker: {e}'

def list_containers(ssh_client: paramiko.SSHClient) -> str:
    """Return a human-friendly list of running docker containers."""
    try:
        out, err = run_command(ssh_client, 'docker ps --format "{{.ID}}\t{{.Image}}\t{{.Names}}\t{{.Status}}"')
        if out.strip():
            lines = out.strip().splitlines()
            # build readable output
            result = ['–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:']
            for line in lines:
                parts = line.split('\t')
                result.append(f'ID: {parts[0]} | Image: {parts[1]} | Name: {parts[2]} | Status: {parts[3]}')
                return '\n'.join(result)
        else:
            return '–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.'
    except Exception as e:
        return f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}'




def stop_container(ssh_client: paramiko.SSHClient, container_id_or_name: str) -> str:
    """Stop container by ID or name and return command output."""
    try:
        # try stopping directly
        out, err = run_command(ssh_client, f'docker stop {container_id_or_name}')
        if out.strip():
            return f'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {out.strip()}'
        if err.strip():
            # sometimes error message arrives in stderr but useful
            return f'–°–æ–æ–±—â–µ–Ω–∏–µ: {err.strip()}'
        return '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞).'
    except Exception as e:
        # try with sudo if direct stop failed
        try:
            out, err = run_command(ssh_client, f'sudo docker stop {container_id_or_name}')
            if out.strip():
                return f'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å sudo: {out.strip()}'
            if err.strip():
                return f'–°–æ–æ–±—â–µ–Ω–∏–µ (sudo): {err.strip()}'
            return '–ö–æ–º–∞–Ω–¥–∞ —Å sudo –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞).'
        except Exception as e2:
            return f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e2}'
        
def install_docker(ssh_client):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ (Ubuntu/Debian/CentOS)."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –û–°
        out, err = run_command(ssh_client, "cat /etc/os-release")
        if "Ubuntu" in out or "Debian" in out:
            cmds = [
                "sudo apt-get update -y",
                "sudo apt-get install -y ca-certificates curl gnupg lsb-release",
                "sudo mkdir -p /etc/apt/keyrings",
                "curl -fsSL https://download.docker.com/linux/$(. /etc/os-release && echo $ID)/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg",
                "echo \\\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$(. /etc/os-release && echo $ID) $(lsb_release -cs) stable\\\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null",
                "sudo apt-get update -y",
                "sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin",
                "sudo systemctl enable docker",
                "sudo systemctl start docker",
            ]
        elif "CentOS" in out or "Red Hat" in out:
            cmds = [
                "sudo yum install -y yum-utils",
                "sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo",
                "sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin",
                "sudo systemctl enable docker",
                "sudo systemctl start docker",
            ]
        else:
            return "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
        output = []
        for cmd in cmds:
            output.append(f"> {cmd}")
            out, err = run_command(ssh_client, cmd)
            if out.strip():
                output.append(out.strip())
            if err.strip():
                output.append(err.strip())
        return "\\n".join(output) + "\\n‚úÖ Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Docker: {e}"


def run_container(ssh_client, image_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ –∏–º–µ–Ω–∏ –æ–±—Ä–∞–∑–∞."""
    try:
        if not image_name.strip():
            return "–û—à–∏–±–∫–∞: –∏–º—è –æ–±—Ä–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ."

        cmd = f"sudo docker run -d {image_name}"
        out, err = run_command(ssh_client, cmd)
        if out.strip():
            return f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω:\n{out.strip()}"
        elif err.strip():
            return f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{err.strip()}"
        else:
            return "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}"


def install_container(ssh_client, image_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç (pull) Docker-–æ–±—Ä–∞–∑ –ø–æ –∏–º–µ–Ω–∏."""
    try:
        if not image_name.strip():
            return "–û—à–∏–±–∫–∞: –∏–º—è –æ–±—Ä–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ."

        cmd = f"sudo docker pull {image_name}"
        out, err = run_command(ssh_client, cmd)
        result = []
        if out.strip():
            result.append(out.strip())
        if err.strip():
            result.append(err.strip())
        if not result:
            result.append("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞).")
        return "\\n".join(result) + "\\n‚úÖ –û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}"
    

def reboot_server(ssh_client, sudo_password=None):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–æ–ª—è sudo —á–µ—Ä–µ–∑ stdin (–±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è)."""
    try:
        command = "sudo -S reboot"
        stdin, stdout, stderr = ssh_client.exec_command(command, get_pty=True)

        if sudo_password:
            # –ü–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–æ–ª—å, –Ω–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
            stdin.write(sudo_password + "\n")
            stdin.flush()

        out = stdout.read().decode(errors="ignore")
        err = stderr.read().decode(errors="ignore")

        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è sudo prompt –∏–ª–∏ –ø–∞—Ä–æ–ª—å
        filtered_output = []
        for line in (out + "\n" + err).splitlines():
            if "[sudo]" in line or sudo_password in line:
                continue
            filtered_output.append(line.strip())

        if not filtered_output:
            filtered_output.append("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞).")

        return "\n".join(filtered_output).strip() + "\nüîÑ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è!"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}"


